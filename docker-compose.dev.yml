# for development purposes
# to run the backend and frontend in development mode
# run `docker-compose -f docker-compose.dev.yml up`
# to access the frontend, go to http://localhost:5173
# to access the backend, go to http://localhost:3000


services:
  zookeeper:
    image: docker.io/confluentinc/cp-zookeeper:7.2.15
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - ./kafka_data/zookeeper/data:/var/lib/zookeeper/data

  kafka:
    image: docker.io/confluentinc/cp-kafka:7.2.15
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # Listeners for both host & container access
      # connect from docker container network using `kafka:9092`
      # connect from host network using `localhost:29092`
      # { ..., "brokers": ["kafka:9092", "localhost:29092"], ... } in config.json
      # will allow both host and container connections
      # docker compose up -d
      # or
      # docker run --network host v$(pwd)/config.json:/app/config.json shantanuterang/simple-kafka-ui
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      # Enable auto topic creation
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      # Set the replication factor for internal topics
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - ./kafka_data/kafka/data:/var/lib/kafka/data

  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile.dev
    container_name: backend
    volumes:
      - ./config.json:/app/config.json
      - ./src/backend:/app/backend
      - /app/backend/node_modules
    command: npm run dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - kafka
      - zookeeper

  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile.dev
    container_name: frontend
    depends_on:
      - backend
    volumes:
      - ./src/frontend:/app/frontend
      - /app/frontend/node_modules
    command: npm run dev
    ports:
      - "5173:5173"
    environment:
      - CHOKIDAR_USEPOLLING=true